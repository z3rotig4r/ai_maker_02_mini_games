import React, { useState, useEffect, useCallback } from 'react';
import './MemoryGame.css';

// 이미지 임포트
const CARD_IMAGES = {
  mario: '/assets/mario.png',
  luigi: '/assets/luigi.png',
  peach: '/assets/peach.png',
  toad: '/assets/toad.png',
  yoshi: '/assets/yoshi.png',
  bowser: '/assets/bowser.png',
  koopa: '/assets/koopa.png',
  goomba: '/assets/goomba.png'
};

type CardValue = 'mario' | 'luigi' | 'peach' | 'toad' | 'yoshi' | 'bowser' | 'koopa' | 'goomba';

interface MemoryGameProps {
  difficulty: number;
  onComplete: (hint: string) => void;
}

interface Card {
  id: number;
  value: CardValue;
  isFlipped: boolean;
  isMatched: boolean;
}

// 카드 이미지 매핑
const CARD_IMAGES: Record<CardValue, any> = {
  mario: require('../../../assets/mario.png'),
  luigi: require('../../../assets/luigi.png'),
  peach: require('../../../assets/peach.png'),
  toad: require('../../../assets/toad.png'),
  yoshi: require('../../../assets/yoshi.png'),
  bowser: require('../../../assets/bowser.png'),
  koopa: require('../../../assets/koopa.png'),
  goomba: require('../../../assets/goomba.png')
};

// 사용 가능한 카드 값 목록
const CARD_VALUES: CardValue[] = [
  'mario', 'luigi', 'peach', 'toad',
  'yoshi', 'bowser', 'koopa', 'goomba'
];

const MemoryGame: React.FC<MemoryGameProps> = ({ difficulty, onComplete }) => {
  const [cards, setCards] = useState<Card[]>([]);
  const [flippedCards, setFlippedCards] = useState<number[]>([]);
  const [matchedPairs, setMatchedPairs] = useState<number>(0);
  const [moves, setMoves] = useState<number>(0);
  const [isGameStarted, setIsGameStarted] = useState<boolean>(false);
  const [isGameCompleted, setIsGameCompleted] = useState<boolean>(false);
  const [gameStarted, setGameStarted] = useState<boolean>(false);
  const [isCompleted, setIsCompleted] = useState<boolean>(false);

  // 컴포넌트가 마운트될 때 게임 초기화
  useEffect(() => {
    console.log('Initializing game...');
    initializeGame();
    // 게임 시작 상태를 false로 설정
    setGameStarted(false);
  }, [difficulty]);
  
  // 첫 번째 카드가 클릭되었을 때 게임 시작
  const startGame = () => {
    if (!gameStarted) {
      console.log('Starting game...');
      setGameStarted(true);
    }
  };

  const initializeGame = () => {
    console.log('Initializing game with difficulty:', difficulty);
    
    // 난이도에 따른 카드 수 조정 (최소 4쌍, 최대 8쌍)
    const minPairs = 4;
    const maxPairs = 8;
    const cardCount = Math.min(maxPairs * 2, Math.max(minPairs * 2, 8 + (difficulty - 1) * 4));
    console.log('Card count:', cardCount);
    
    // 카드 값 준비
    const values = [...CARD_VALUES.slice(0, cardCount / 2)];
    console.log('Selected card values:', values);
    
    // 카드 배열 생성 및 섞기
    const allCards = [...values, ...values]
      .map((value, index) => ({
        id: index,
        value,
        isFlipped: false,
        isMatched: false
      }))
      .sort(() => Math.random() - 0.5);
    
    console.log('Generated cards:', allCards.length);
    
    // 상태 초기화
    setCards(allCards);
    setFlippedCards([]);
    setMatchedPairs(0);
    setMoves(0);
    setIsCompleted(false);
    setGameStarted(false);
  };

  const handleCardClick = (cardId: number) => {
    console.log('Card clicked:', cardId);
    
    // 게임이 완료되었으면 클릭 무시
    if (isCompleted) {
      console.log('Game is completed, ignoring click');
      return;
    }

    const card = cards[cardId];
    
    // 이미 매칭되었거나 뒤집힌 카드는 무시
    if (card.isMatched || card.isFlipped || flippedCards.length >= 2) {
      console.log('Card is already matched/flipped or too many cards flipped');
      return;
    }

    // 첫 번째 카드 클릭 시 게임 시작
    if (!gameStarted) {
      console.log('Starting game...');
      startGame();
    }

    console.log('Flipping card:', card.value);
    
    // 카드 뒤집기
    const newCards = cards.map(c => 
      c.id === cardId ? { ...c, isFlipped: true } : c
    );
    setCards(newCards);

    if (flippedCards.length === 0) {
      // 첫 번째 카드 선택
      console.log('First card selected');
      setFlippedCards([cardId]);
    } else {
      // 두 번째 카드 선택
      console.log('Second card selected');
      setMoves(m => m + 1);
      const firstCard = cards[flippedCards[0]];
      
      if (firstCard.value === card.value && firstCard.id !== card.id) {
        // 매치 성공
        console.log('Match found!');
        setMatchedPairs(m => m + 1);
        setCards(prev => prev.map(c => 
          (c.id === cardId || c.id === flippedCards[0])
            ? { ...c, isMatched: true, isFlipped: true }
            : c
        ));
        setFlippedCards([]);

        // 게임 클리어 확인은 useEffect에서 처리
      } else {
        // 매치 실패
        console.log('No match');
        setFlippedCards([...flippedCards, cardId]);
        
        // 잠시 후 카드 다시 뒤집기
        setTimeout(() => {
          console.log('Flipping cards back');
          setCards(prev => prev.map(c => 
            (c.id === cardId || c.id === flippedCards[0])
              ? { ...c, isFlipped: false }
              : c
          ));
          setFlippedCards([]);
        }, 1000);
      }
    }
  };

  useEffect(() => {
    // 게임이 시작되지 않았거나 이미 완료된 경우 무시
    if (!gameStarted || isCompleted) {
      return;
    }

    // 모든 카드가 매칭되었을 때만 완료 처리
    if (matchedPairs === cards.length / 2) {
      setIsCompleted(true);
      onComplete('두 번째 무기엔... 부끄부끄의 힘이 필요할 거야!');
    }
  }, [matchedPairs, cards.length, gameStarted, isCompleted, onComplete]);

  return (
    <div className="memory-game">
      <div className="game-info">
        <div className="info-box moves">
          <span className="info-label">이동 횟수</span>
          <span className="info-value">{moves}</span>
        </div>
        <div className="info-box pairs">
          <span className="info-label">찾은 짝</span>
          <span className="info-value">{matchedPairs}</span>
        </div>
        {isCompleted && (
          <div className="game-complete">
            <div>게임 완료!</div>
            <button className="restart-button" onClick={initializeGame}>
              다시 시작
            </button>
          </div>
        )}
      </div>
      <div 
        className="cards-grid" 
        style={{
          gridTemplateColumns: `repeat(${Math.ceil(Math.sqrt(cards.length))}, 1fr)`,
          gap: '10px',
          padding: '20px'
        }}
      >
        {cards.map(card => (
          <div
            key={card.id}
            className={`card ${card.isFlipped ? 'flipped' : ''} ${card.isMatched ? 'matched' : ''}`}
            onClick={() => handleCardClick(card.id)}
          >
            <div className="card-inner">
              <div className="card-front">
                <div className="card-question">?</div>
              </div>
              <div className="card-back">
                <img src={CARD_IMAGES[card.value]} alt={card.value} />
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default MemoryGame;
